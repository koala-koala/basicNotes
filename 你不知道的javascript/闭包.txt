闭包：把引用了当前词法作用域的内部函数传递的当前词法作用域外，此时该函数仍持有对当前作用于的引用，在外部能访问到这个词法作用域的变量，导致在当前函数执行结束时gc仍不能回收里面的变量。
例：
function foo() {
  var a = 2;
  function bar() {
    console.log(a); // 引用foo作用域的变量
  }
  return bar; // 将foo作用域内部的函数bar传递到外面
}

const baz = foo(); // foo执行后，变量a不能被gc回收
baz(); // 2 此时能访问到a的值为2
bar对foo作用域的引用就是闭包。


for (var i=1; i<=5; i++) { 
  // var定义的i在全局作用域下，timer本就可以访问到，不存在闭包
  setTimeout(function timer() {
    console.log( i ); // 打印 6 6 6 6 6
  }, i*1000 );
}

for (let i=1; i<=5; i++) { 
  // let定义的变量i在for的块级作用域下，setTimeout会形成闭包,timer持有for的块级作用域的引用，所以每次变量i不会被销毁
  setTimeout(function timer() {
    console.log( i ); // 打印 1 2 3 4 5
  }, i*1000 );
}

闭包的使用场景：
1、回调函数；
2、setTimeout()函数；
3、立即执行函数iief
4、模块